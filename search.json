[{"path":"https://msperlin.github.io/yfR/Contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing to yfR","title":"Contributing to yfR","text":"First, thanks interest package apraisal contributing codebase `yfR. academic, R projects official funding. always nice community helping maintaing code. main links contributing:","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to yfR","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to yfR","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"share-the-love-Ô∏è","dir":"","previous_headings":"How you can contribute","what":"Share the love ‚ù§Ô∏è","title":"Contributing to yfR","text":"Think our_package useful? Let others discover , telling person, via Twitter blog post. Using our_package paper writing? Consider citing .","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"report-a-bug-","dir":"","previous_headings":"How you can contribute","what":"Report a bug üêõ","title":"Contributing to yfR","text":"‚Äôve found bug using package, please report creating issue GitHub can fix . good bug report makes easier us , please include: operating system name version (e.g.¬†Mac OS 10.13.6). details local setup might helpful troubleshooting. Detailed steps reproduce bug.","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"improve-the-documentation-","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation üìñ","title":"Contributing to yfR","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"the-website","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"The website","title":"Contributing to yfR","text":"website generated pkgdown. means don‚Äôt write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , report issue can point right direction.","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"Function documentation","title":"Contributing to yfR","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file name function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"contribute-code-","dir":"","previous_headings":"How you can contribute","what":"Contribute code üìù","title":"Contributing to yfR","text":"Care fix bugs implement new functionality our_package? Awesome! üëè look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://msperlin.github.io/yfR/Contributing.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to yfR","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream master. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors warnings. Commit push changes. Submit pull request.","code":""},{"path":"https://msperlin.github.io/yfR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 yfR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://msperlin.github.io/yfR/articles/yf-vignette.html","id":"fetching-a-single-stock-price","dir":"Articles","previous_headings":"Examples","what":"Fetching a single stock price","title":"Using yfR","text":"","code":"library(yfR)  # set options for algorithm my_ticker <- 'FB' first_date <- Sys.Date() - 30 last_date <- Sys.Date()  # fetch data df_yf <- yf_get(tickers = my_ticker,                       first_date = first_date,                      last_date = last_date) ## ## ‚îÄ‚îÄ Running yfR for 1 stocks | 2022-03-09 --> 2022-04-08 (30 days) ‚îÄ‚îÄ ## ## ‚Ñπ Downloading data for benchmark ticker ^GSPC ## ‚Ñπ (1/1) Fetching data for ', ## 'FB ## !  - not cached ## ‚úî  - cache saved successfully ## ‚úî  - got 22 valid rows (2022-03-09 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Got it! ## ‚Ñπ Binding price data # output is a tibble with data head(df_yf) ## # A tibble: 6 √ó 10 ##   ticker ref_date   price_open price_high price_low price_close   volume ##   <chr>  <date>          <dbl>      <dbl>     <dbl>       <dbl>    <dbl> ## 1 FB     2022-03-09       196.       199.      194.        198. 31894700 ## 2 FB     2022-03-10       195.       196.      191.        195. 24853000 ## 3 FB     2022-03-11       193.       194.      187.        188. 34694500 ## 4 FB     2022-03-14       187.       192.      186.        187. 31010500 ## 5 FB     2022-03-15       191.       192.      186.        192. 31721700 ## 6 FB     2022-03-16       195.       204.      195.        204. 40640300 ## # ‚Ä¶ with 3 more variables: price_adjusted <dbl>, ret_adjusted_prices <dbl>, ## #   ret_closing_prices <dbl>"},{"path":"https://msperlin.github.io/yfR/articles/yf-vignette.html","id":"fetching-many-stock-prices","dir":"Articles","previous_headings":"Examples","what":"Fetching many stock prices","title":"Using yfR","text":"","code":"library(yfR) library(ggplot2)  my_ticker <- c('FB', 'GM', 'MMM') first_date <- Sys.Date() - 100 last_date <- Sys.Date()  df_yf_multiple <- yf_get(tickers = my_ticker,                       first_date = first_date,                      last_date = last_date) ## ## ‚îÄ‚îÄ Running yfR for 3 stocks | 2021-12-29 --> 2022-04-08 (100 days) ‚îÄ‚îÄ ## ## ‚Ñπ Downloading data for benchmark ticker ^GSPC ## ‚Ñπ (1/3) Fetching data for ', ## 'FB ## ‚úî  - found cache file (2022-03-09 --> 2022-04-07) ## !  - need new data (cache doesnt match query) ## ‚úî  - got 70 valid rows (2021-12-29 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Nice! ## ‚Ñπ (2/3) Fetching data for ', ## 'GM ## !  - not cached ## ‚úî  - cache saved successfully ## ‚úî  - got 70 valid rows (2021-12-29 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Nice! ## ‚Ñπ (3/3) Fetching data for ', ## 'MMM ## !  - not cached ## ‚úî  - cache saved successfully ## ‚úî  - got 70 valid rows (2021-12-29 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Well done runner! ## ‚Ñπ Binding price data p <- ggplot(df_yf_multiple, aes(x = ref_date, y = price_adjusted,                        color = ticker)) +    geom_line()  p"},{"path":"https://msperlin.github.io/yfR/articles/yf-vignette.html","id":"fetching-collections-of-prices","dir":"Articles","previous_headings":"Examples","what":"Fetching collections of prices","title":"Using yfR","text":"Collections just bundle tickers pre-organized package. example, collection SP500 represents current composition SP500 index.","code":"library(yfR)  df_yf <- yf_collection_get(\"SP500\")  head(df_yf)"},{"path":"https://msperlin.github.io/yfR/articles/yf-vignette.html","id":"fetching-dailyweeklymonthlyyearly-price-data","dir":"Articles","previous_headings":"Examples","what":"Fetching daily/weekly/monthly/yearly price data","title":"Using yfR","text":"","code":"library(yfR) library(ggplot2) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union my_ticker <- 'GE' first_date <- '2010-01-01' last_date <- Sys.Date()  df_dailly <- yf_get(tickers = my_ticker,                           first_date, last_date,                           freq_data = 'daily') %>%   mutate(freq = 'daily') ## ## ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-04-08 (4480 days) ‚îÄ‚îÄ ## ## ‚Ñπ Downloading data for benchmark ticker ^GSPC ## ‚Ñπ (1/1) Fetching data for ', ## 'GE ## !  - not cached ## ‚úî  - cache saved successfully ## ‚úî  - got 3088 valid rows (2010-01-04 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Well done runner! ## ‚Ñπ Binding price data df_weekly <- yf_get(tickers = my_ticker,                           first_date, last_date,                           freq_data = 'weekly') %>%   mutate(freq = 'weekly') ## ## ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-04-08 (4480 days) ‚îÄ‚îÄ ## ## ‚Ñπ Downloading data for benchmark ticker ^GSPC ## ‚Ñπ (1/1) Fetching data for ', ## 'GE ## ‚úî  - found cache file (2010-01-04 --> 2022-04-07) ## ‚úî  - got 3088 valid rows (2010-01-04 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Time for some tea? ## ‚Ñπ Binding price data df_monthly <- yf_get(tickers = my_ticker,                           first_date, last_date,                           freq_data = 'monthly') %>%   mutate(freq = 'monthly') ## ## ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-04-08 (4480 days) ‚îÄ‚îÄ ## ## ‚Ñπ Downloading data for benchmark ticker ^GSPC ## ‚Ñπ (1/1) Fetching data for ', ## 'GE ## ‚úî  - found cache file (2010-01-04 --> 2022-04-07) ## ‚úî  - got 3088 valid rows (2010-01-04 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Got it! ## ‚Ñπ Binding price data df_yearly <- yf_get(tickers = my_ticker,                           first_date, last_date,                           freq_data = 'yearly') %>%   mutate(freq = 'yearly') ## ## ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-04-08 (4480 days) ‚îÄ‚îÄ ## ## ‚Ñπ Downloading data for benchmark ticker ^GSPC ## ‚Ñπ (1/1) Fetching data for ', ## 'GE ## ‚úî  - found cache file (2010-01-04 --> 2022-04-07) ## ‚úî  - got 3088 valid rows (2010-01-04 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Good stuff! ## ‚Ñπ Binding price data df_allfreq <- bind_rows(   list(df_dailly, df_weekly, df_monthly, df_yearly) ) %>%   mutate(freq = factor(freq,                         levels = c('daily',                                    'weekly',                                   'monthly',                                   'yearly'))) # make sure the order in plot is right  p <- ggplot(df_allfreq, aes(x=ref_date, y = price_adjusted)) +    geom_point() +    geom_line() +    facet_grid(freq ~ ticker) +    theme_minimal() +    labs(x = '', y = 'Adjusted Prices')  print(p)"},{"path":"https://msperlin.github.io/yfR/articles/yf-vignette.html","id":"changing-format-to-wide","dir":"Articles","previous_headings":"Examples","what":"Changing format to wide","title":"Using yfR","text":"","code":"library(yfR) library(ggplot2)  my_ticker <- c('FB', 'GM', 'MMM') first_date <- Sys.Date() - 100 last_date <- Sys.Date()  df_yf_multiple <- yf_get(tickers = my_ticker,                       first_date = first_date,                      last_date = last_date) ## ## ‚îÄ‚îÄ Running yfR for 3 stocks | 2021-12-29 --> 2022-04-08 (100 days) ‚îÄ‚îÄ ## ## ‚Ñπ Downloading data for benchmark ticker ^GSPC ## ‚Ñπ (1/3) Fetching data for ', ## 'FB ## ‚úî  - found cache file (2021-12-29 --> 2022-04-07) ## ‚úî  - got 70 valid rows (2021-12-29 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Good stuff! ## ‚Ñπ (2/3) Fetching data for ', ## 'GM ## ‚úî  - found cache file (2021-12-29 --> 2022-04-07) ## ‚úî  - got 70 valid rows (2021-12-29 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- Mais contente que cusco de cozinheira! ## ‚Ñπ (3/3) Fetching data for ', ## 'MMM ## ‚úî  - found cache file (2021-12-29 --> 2022-04-07) ## ‚úî  - got 70 valid rows (2021-12-29 --> 2022-04-07) ## ‚úî  - got 100% of valid prices -- All OK! ## ‚Ñπ Binding price data l_wide <- yf_convert_to_wide(df_yf_multiple)  prices_wide <- l_wide$price_adjusted  head(prices_wide) ## # A tibble: 6 √ó 4 ##   ref_date      FB    GM   MMM ##   <date>     <dbl> <dbl> <dbl> ## 1 2021-12-29  343.  57.2  177. ## 2 2021-12-30  344.  58.1  176. ## 3 2021-12-31  336.  58.6  176. ## 4 2022-01-03  339.  61.2  176. ## 5 2022-01-04  337.  65.7  179. ## 6 2022-01-05  324.  62.7  178."},{"path":"https://msperlin.github.io/yfR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcelo Perlin. Author, maintainer.","code":""},{"path":"https://msperlin.github.io/yfR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Makes easy download financial data Yahoo Finance <https://finance.yahoo.com/>,  vast repository stock price data across multiple financial exchanges. package offers local caching system  support parallel computation.","code":"@Manual{,   title = {yfR: Downloads and Organizes Financial Data from Yahoo Finance},   author = {Marcelo Perlin},   year = {2021},   note = {R package version 0.0.1},   url = {https://github.com/msperlin/yfR}, }"},{"path":"https://msperlin.github.io/yfR/index.html","id":"motivation","dir":"","previous_headings":"","what":"Downloads and Organizes Financial Data from Yahoo Finance","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"yfR second backwards-incompatible version BatchGetSymbols. nutshell, provides access daily stock prices Yahoo Finance, vast repository financial data around globe. Yahoo Finance cover large number markets assets, used extensively importing price datasets used academic research teaching. Package yfR based quantmod used main function fetching data Yahoo Finance. main innovation yfR organization imported financial data using local caching system parallel computing speeding large scale download datasets Yahoo Finance. See full documentation .","code":""},{"path":"https://msperlin.github.io/yfR/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"Fetchs daily/weekly/monthly/annual stock prices/returns yahoo finance outputs dataframe (tibble) long format (stacked data); new feature called ‚Äúcollections‚Äù facilitates download multiple tickers particular market/index. can, example, download data stocks SP500 index simple call yf_collection_get(); session-persistent smart cache system available default. means data saved locally missing portions downloaded, needed. dates compared benchmark ticker SP500 , whenever individual asset sufficient number dates, software drops output. means can choose ignore tickers high number missing dates. customized function called yf_convert_to_wide() can transform long dataframe wide format (tickers columns), much used portfolio optimization. output list element different target variable (prices, returns, volumes). Parallel computing package furrr available, speeding data importation process.","code":""},{"path":"https://msperlin.github.io/yfR/index.html","id":"differences-from-batchgetsymbols","dir":"","previous_headings":"","what":"Differences from BatchGetSymbols","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"Package BatchgetSymbols developed back 2016, many bad structural choices part. Since , learned R ecosystem, resulting better maintainable code. However, impossible keep compatibility changes wanted make, decided develop new (fresh) package. main differences yfR (new) BatchGetSymbols (old): input arguments now formatted ‚Äúsnake_case‚Äù ‚Äúdot.case‚Äù. example, argument first date data importation yfR::yf_get() first_date, first.date used BatchGetSymbols::BatchGetSymbols. function renamed common API notation. example, BatchGetSymbols::BatchGetSymbols now yfR::yf_get(). Likewise, function fetching collections yfR::yf_collection_get(). output yfR::yf_get() always tibble price data (list BatchGetSymbols::BatchGetSymbols). one wants tibble summary importing process, available attribute output (see function base::attributes) new feature called ‚Äúcollection‚Äù, allows easy download collection tickers. example, can download price data components SP500 simply calling yfR::yf_collection_get(\"SP500\"). New prettier status messages using package cli","code":""},{"path":"https://msperlin.github.io/yfR/index.html","id":"warnings","dir":"","previous_headings":"","what":"Warnings","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"Yahoo finance data far perfect reliable, specially individual stocks. experience, using research code stock indices fine can match data sources. , adjusted stock prices individual assets messy stock events splits dividends properly registered. never able match data sources, specially long time periods lots corporate events. advice never use yahoo finance data individual stocks production (research papers academic documents ‚Äì thesis dissertations). adjusted price data individual stocks important research, use data sources EOD, SimFin Econom√°tica.","code":""},{"path":"https://msperlin.github.io/yfR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"","code":"# CRAN (not yet available) #install.packages('yfR')  # Github (dev version) devtools::install_github('msperlin/yfR')"},{"path":[]},{"path":"https://msperlin.github.io/yfR/index.html","id":"fetching-a-single-stock-price","dir":"","previous_headings":"Examples","what":"Fetching a single stock price","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"","code":"library(yfR)  # set options for algorithm my_ticker <- 'FB' first_date <- Sys.Date() - 30 last_date <- Sys.Date()  # fetch data df_yf <- yf_get(tickers = my_ticker,                       first_date = first_date,                      last_date = last_date) #>  #> ‚îÄ‚îÄ Running yfR for 1 stocks | 2022-03-01 --> 2022-03-31 (30 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/1) Fetching data for ', #> 'FB #> !    - not cached #> ‚úì    - cache saved successfully #> ‚úì    - got 22 valid rows (2022-03-01 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Good stuff! #> ‚Ñπ Binding price data  # output is a tibble with data head(df_yf) #> # A tibble: 6 √ó 10 #>   ticker ref_date   price_open price_high price_low price_close   volume #>   <chr>  <date>          <dbl>      <dbl>     <dbl>       <dbl>    <dbl> #> 1 FB     2022-03-01       210.       212.      202.        203. 27094900 #> 2 FB     2022-03-02       205.       209.      202.        208. 29452100 #> 3 FB     2022-03-03       209.       209.      201.        203. 27263500 #> 4 FB     2022-03-04       202.       206.      199.        200. 32130900 #> 5 FB     2022-03-07       201.       201.      187.        187. 38560600 #> 6 FB     2022-03-08       188.       197.      186.        190. 37508100 #> # ‚Ä¶ with 3 more variables: price_adjusted <dbl>, ret_adjusted_prices <dbl>, #> #   ret_closing_prices <dbl>"},{"path":"https://msperlin.github.io/yfR/index.html","id":"fetching-many-stock-prices","dir":"","previous_headings":"Examples","what":"Fetching many stock prices","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"","code":"library(yfR) library(ggplot2)  my_ticker <- c('FB', 'GM', 'MMM') first_date <- Sys.Date() - 100 last_date <- Sys.Date()  df_yf_multiple <- yf_get(tickers = my_ticker,                                first_date = first_date,                               last_date = last_date) #>  #> ‚îÄ‚îÄ Running yfR for 3 stocks | 2021-12-21 --> 2022-03-31 (100 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/3) Fetching data for ', #> 'FB #> ‚úì    - found cache file (2022-03-01 --> 2022-03-30) #> !    - need new data (cache doesnt match query) #> ‚úì    - got 69 valid rows (2021-12-21 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Looking good! #> ‚Ñπ (2/3) Fetching data for ', #> 'GM #> !    - not cached #> ‚úì    - cache saved successfully #> ‚úì    - got 69 valid rows (2021-12-21 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Well done msperlin! #> ‚Ñπ (3/3) Fetching data for ', #> 'MMM #> !    - not cached #> ‚úì    - cache saved successfully #> ‚úì    - got 69 valid rows (2021-12-21 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Got it! #> ‚Ñπ Binding price data   p <- ggplot(df_yf_multiple,              aes(x = ref_date, y = price_adjusted,                 color = ticker)) +    geom_line()  print(p)"},{"path":"https://msperlin.github.io/yfR/index.html","id":"fetching-collections-of-prices","dir":"","previous_headings":"Examples","what":"Fetching collections of prices","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"Collections just bundle tickers pre-organized package. example, collection SP500 represents current composition SP500 index.","code":"library(yfR)  df_yf <- yf_collection_get(\"SP500\",                             first_date = Sys.Date() - 30,                            last_date = Sys.Date())  head(df_yf)"},{"path":"https://msperlin.github.io/yfR/index.html","id":"fetching-dailyweeklymonthlyyearly-price-data","dir":"","previous_headings":"Examples","what":"Fetching daily/weekly/monthly/yearly price data","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"","code":"library(yfR) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  my_ticker <- 'GE' first_date <- '2010-01-01' last_date <- Sys.Date()  df_dailly <- yf_get(tickers = my_ticker,                           first_date, last_date,                           freq_data = 'daily') %>%   mutate(freq = 'daily') #>  #> ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-03-31 (4472 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/1) Fetching data for ', #> 'GE #> !    - not cached #> ‚úì    - cache saved successfully #> ‚úì    - got 3082 valid rows (2010-01-04 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Time for some tea? #> ‚Ñπ Binding price data   df_weekly <- yf_get(tickers = my_ticker,                           first_date, last_date,                           freq_data = 'weekly') %>%   mutate(freq = 'weekly') #>  #> ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-03-31 (4472 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/1) Fetching data for ', #> 'GE #> ‚úì    - found cache file (2010-01-04 --> 2022-03-30) #> ‚úì    - got 3082 valid rows (2010-01-04 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Looking good! #> ‚Ñπ Binding price data  df_monthly <- yf_get(tickers = my_ticker,                            first_date, last_date,                            freq_data = 'monthly') %>%   mutate(freq = 'monthly') #>  #> ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-03-31 (4472 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/1) Fetching data for ', #> 'GE #> ‚úì    - found cache file (2010-01-04 --> 2022-03-30) #> ‚úì    - got 3082 valid rows (2010-01-04 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Good stuff! #> ‚Ñπ Binding price data  df_yearly <- yf_get(tickers = my_ticker,                           first_date, last_date,                           freq_data = 'yearly') %>%   mutate(freq = 'yearly') #>  #> ‚îÄ‚îÄ Running yfR for 1 stocks | 2010-01-01 --> 2022-03-31 (4472 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/1) Fetching data for ', #> 'GE #> ‚úì    - found cache file (2010-01-04 --> 2022-03-30) #> ‚úì    - got 3082 valid rows (2010-01-04 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Time for some tea? #> ‚Ñπ Binding price data  df_allfreq <- bind_rows(   list(df_dailly, df_weekly, df_monthly, df_yearly) ) %>%   mutate(freq = factor(freq,                         levels = c('daily',                                    'weekly',                                   'monthly',                                   'yearly'))) # make sure the order in plot is right  p <- ggplot(df_allfreq, aes(x=ref_date, y = price_adjusted)) +    geom_point() + geom_line() + facet_grid(freq ~ ticker) +    theme_minimal() +    labs(x = '', y = 'Adjusted Prices')  print(p)"},{"path":"https://msperlin.github.io/yfR/index.html","id":"changing-format-to-wide","dir":"","previous_headings":"Examples","what":"Changing format to wide","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"","code":"library(yfR) library(ggplot2) library(kableExtra) #>  #> Attaching package: 'kableExtra' #> The following object is masked from 'package:dplyr': #>  #>     group_rows  my_ticker <- c('FB', 'GM', 'MMM') first_date <- Sys.Date() - 100 last_date <- Sys.Date()  df_yf_multiple <- yf_get(tickers = my_ticker,                                first_date = first_date,                               last_date = last_date) #>  #> ‚îÄ‚îÄ Running yfR for 3 stocks | 2021-12-21 --> 2022-03-31 (100 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/3) Fetching data for ', #> 'FB #> ‚úì    - found cache file (2021-12-21 --> 2022-03-30) #> ‚úì    - got 69 valid rows (2021-12-21 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Time for some tea? #> ‚Ñπ (2/3) Fetching data for ', #> 'GM #> ‚úì    - found cache file (2021-12-21 --> 2022-03-30) #> ‚úì    - got 69 valid rows (2021-12-21 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Got it! #> ‚Ñπ (3/3) Fetching data for ', #> 'MMM #> ‚úì    - found cache file (2021-12-21 --> 2022-03-30) #> ‚úì    - got 69 valid rows (2021-12-21 --> 2022-03-30) #> ‚úì    - got 100% of valid prices -- Well done msperlin! #> ‚Ñπ Binding price data  l_wide <- yf_convert_to_wide(df_yf_multiple)  prices_wide <- l_wide$price_adjusted  head(prices_wide) #> # A tibble: 6 √ó 4 #>   ref_date      FB    GM   MMM #>   <date>     <dbl> <dbl> <dbl> #> 1 2021-12-21  334.  54.8  171. #> 2 2021-12-22  330.  56.1  171. #> 3 2021-12-23  335.  56.9  173. #> 4 2021-12-27  346.  57.4  175. #> 5 2021-12-28  346.  57.1  176. #> 6 2021-12-29  343.  57.2  177."},{"path":"https://msperlin.github.io/yfR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://msperlin.github.io/yfR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"https://msperlin.github.io/yfR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://msperlin.github.io/yfR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_collection_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"function use set collection YF data, index components download data Yahoo Finance using yf_get.","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_collection_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"","code":"yf_collection_get(   collection,   first_date = Sys.Date() - 15,   last_date = Sys.Date(),   do_parallel = FALSE,   do_cache = TRUE,   cache_folder = yf_get_default_cache_folder() )"},{"path":"https://msperlin.github.io/yfR/reference/yf_collection_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"collection collection fetch data (e.g. \"SP500\", \"IBOV\", \"FTSE\" ). See function yf_get_available_collections finding available collections first_date first date query (Date character YYYY-MM-DD) last_date last date query (Date character YYYY-MM-DD) do_parallel Flag using parallel (default = FALSE). using parallel, make sure call function future::plan() first. do_cache Use cache system? (default = TRUE) cache_folder save cache files? (default = yfR::yf_get_default_cache_folder() )","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_collection_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"dataframe financial prices collection","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_collection_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"","code":"if (FALSE) { df_yf <- yf_collection_get(\"IBOV\") }"},{"path":"https://msperlin.github.io/yfR/reference/yf_convert_to_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms a long (stacked) dataframe into a list of wide dataframes ‚Äî yf_convert_to_wide","title":"Transforms a long (stacked) dataframe into a list of wide dataframes ‚Äî yf_convert_to_wide","text":"Transforms long (stacked) dataframe list wide dataframes","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_convert_to_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms a long (stacked) dataframe into a list of wide dataframes ‚Äî yf_convert_to_wide","text":"","code":"yf_convert_to_wide(df_in)"},{"path":"https://msperlin.github.io/yfR/reference/yf_convert_to_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms a long (stacked) dataframe into a list of wide dataframes ‚Äî yf_convert_to_wide","text":"df_in dataframe long format (probably output yf_get())","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_convert_to_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms a long (stacked) dataframe into a list of wide dataframes ‚Äî yf_convert_to_wide","text":"list dataframes wide format (element   different column)","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_convert_to_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms a long (stacked) dataframe into a list of wide dataframes ‚Äî yf_convert_to_wide","text":"","code":"my_f <- system.file(\"extdata/example_data_yfR.rds\", package = \"yfR\") df_tickers <- readRDS(my_f) l_wide <- yf_convert_to_wide(df_tickers) l_wide #> $price_open #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  115652  207.  178. #>  2 2020-01-03  118564  207.  177. #>  3 2020-01-06  117707  207.  177. #>  4 2020-01-07  116872  213.  178. #>  5 2020-01-08  116667  213   178  #>  6 2020-01-09  116248  218.  182. #>  7 2020-01-10  115948  219.  182. #>  8 2020-01-13  115503  220.  181. #>  9 2020-01-14  117325  222.  181. #> 10 2020-01-15  117632  221.  181. #> # ‚Ä¶ with 359 more rows #>  #> $price_high #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  118573  210.  180. #>  2 2020-01-03  118792  210.  179. #>  3 2020-01-06  117707  213.  179. #>  4 2020-01-07  117076  215.  179. #>  5 2020-01-08  117335  216.  182. #>  6 2020-01-09  116820  218.  182. #>  7 2020-01-10  116745  220.  182. #>  8 2020-01-13  117333  222.  182. #>  9 2020-01-14  117705  222.  183. #> 10 2020-01-15  117632  222.  182. #> # ‚Ä¶ with 359 more rows #>  #> $price_low #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  115649  206.  177. #>  2 2020-01-03  117341  207.  176. #>  3 2020-01-06  116269  207.  176. #>  4 2020-01-07  115965  212.  177. #>  5 2020-01-08  115693  213.  178. #>  6 2020-01-09  115411  216.  180. #>  7 2020-01-10  114952  217.  180. #>  8 2020-01-13  115503  219.  180. #>  9 2020-01-14  116610  219.  180. #> 10 2020-01-15  116188  220.  179. #> # ‚Ä¶ with 359 more rows #>  #> $price_close #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  118573  210.  180  #>  2 2020-01-03  117707  209.  178. #>  3 2020-01-06  116878  213.  179. #>  4 2020-01-07  116662  213.  178. #>  5 2020-01-08  116247  215.  181. #>  6 2020-01-09  115947  218.  181. #>  7 2020-01-10  115503  218.  180. #>  8 2020-01-13  117325  222.  181. #>  9 2020-01-14  117632  219.  181. #> 10 2020-01-15  116414  221.  180. #> # ‚Ä¶ with 359 more rows #>  #> $price_adjusted #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  118573  210.  171. #>  2 2020-01-03  117707  209.  169. #>  3 2020-01-06  116878  213.  170. #>  4 2020-01-07  116662  213.  169. #>  5 2020-01-08  116247  215.  171. #>  6 2020-01-09  115947  218.  172. #>  7 2020-01-10  115503  218.  171. #>  8 2020-01-13  117325  222.  172. #>  9 2020-01-14  117632  219.  172. #> 10 2020-01-15  116414  221.  171. #> # ‚Ä¶ with 359 more rows #>  #> $volume #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`       FB     MMM #>    <date>       <dbl>    <dbl>   <dbl> #>  1 2020-01-02 5162700 12077100 3601700 #>  2 2020-01-03 6834500 11188400 2466900 #>  3 2020-01-06 6570000 17058900 1998000 #>  4 2020-01-07 4854100 14912400 2173000 #>  5 2020-01-08 5910500 13475000 2758300 #>  6 2020-01-09 5953500 12642800 2746300 #>  7 2020-01-10 4783400 12119400 2103800 #>  8 2020-01-13 5685100 14463400 2090800 #>  9 2020-01-14 5361700 13288900 2911200 #> 10 2020-01-15 5569400 10036500 2482200 #> # ‚Ä¶ with 359 more rows #>  #> $ret_adjusted_prices #> # A tibble: 369 √ó 4 #>    ref_date    `^BVSP`       FB       MMM #>    <date>        <dbl>    <dbl>     <dbl> #>  1 2020-01-02 NA       NA       NA        #>  2 2020-01-03 -0.00730 -0.00529 -0.00861  #>  3 2020-01-06 -0.00704  0.0188   0.000953 #>  4 2020-01-07 -0.00185  0.00216 -0.00403  #>  5 2020-01-08 -0.00356  0.0101   0.0153   #>  6 2020-01-09 -0.00258  0.0143   0.00316  #>  7 2020-01-10 -0.00383 -0.00110 -0.00403  #>  8 2020-01-13  0.0158   0.0177   0.00249  #>  9 2020-01-14  0.00262 -0.0128   0.00249  #> 10 2020-01-15 -0.0104   0.00954 -0.00877  #> # ‚Ä¶ with 359 more rows #>  #> $ret_closing_prices #> # A tibble: 369 √ó 4 #>    ref_date    `^BVSP`       FB       MMM #>    <date>        <dbl>    <dbl>     <dbl> #>  1 2020-01-02 NA       NA       NA        #>  2 2020-01-03 -0.00730 -0.00529 -0.00861  #>  3 2020-01-06 -0.00704  0.0188   0.000953 #>  4 2020-01-07 -0.00185  0.00216 -0.00403  #>  5 2020-01-08 -0.00356  0.0101   0.0153   #>  6 2020-01-09 -0.00258  0.0143   0.00316  #>  7 2020-01-10 -0.00383 -0.00110 -0.00403  #>  8 2020-01-13  0.0158   0.0177   0.00249  #>  9 2020-01-14  0.00262 -0.0128   0.00249  #> 10 2020-01-15 -0.0104   0.00954 -0.00877  #> # ‚Ä¶ with 359 more rows #>"},{"path":"https://msperlin.github.io/yfR/reference/yf_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function to download financial data from Yahoo Finance ‚Äî yf_get","title":"Main function to download financial data from Yahoo Finance ‚Äî yf_get","text":"Based primarly set tickers time period, function download stock price data Yahoo Finance using getSymbols. organizes data long format outputs \"stacked\" dataframe.","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function to download financial data from Yahoo Finance ‚Äî yf_get","text":"","code":"yf_get(   tickers,   first_date = Sys.Date() - 30,   last_date = Sys.Date(),   thresh_bad_data = 0.75,   bench_ticker = \"^GSPC\",   type_return = \"arit\",   freq_data = \"daily\",   how_to_aggregate = \"last\",   do_complete_data = FALSE,   do_cache = TRUE,   cache_folder = yf_get_default_cache_folder(),   do_parallel = FALSE,   be_quiet = FALSE )"},{"path":"https://msperlin.github.io/yfR/reference/yf_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function to download financial data from Yahoo Finance ‚Äî yf_get","text":"tickers vector tickers. sure whether ticker available, search yahoo finance <https://finance.yahoo.com/>. first_date first date query (Date character YYYY-MM-DD) last_date last date query (Date character YYYY-MM-DD) thresh_bad_data percentage threshold defining bad data. dates benchmark ticker compared asset. percentage non-missing dates respect benchmark ticker lower thresh_bad_data, function ignore asset (default = 0.75) bench_ticker ticker benchmark asset used compare dates. suggestion use main stock index market data coming (default = ^GSPC (SP500, US market)) type_return Type price return calculate: 'arit' - aritmetic (default), 'log' - log returns. freq_data Frequency financial data: 'daily' (default), 'weekly', 'monthly', 'yearly' how_to_aggregate Defines whether aggregate data using first observations aggregating period last ('first', 'last').  example, freq_data = 'yearly' how_to_aggregate = 'last',  last available day year used  aggregated values price_adjusted. (Default = \"last\") do_complete_data Return complete/balanced dataset? TRUE, missing pairs ticker-date replaced NA closest price (see input do_fill_missing_prices). Default = FALSE. do_cache Use cache system? (default = TRUE) cache_folder save cache files? (default = yfR::yf_get_default_cache_folder() ) do_parallel Flag using parallel (default = FALSE). using parallel, make sure call function future::plan() first. be_quiet Flag printing statements (default = FALSE)","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function to download financial data from Yahoo Finance ‚Äî yf_get","text":"dataframe stock prices.","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Main function to download financial data from Yahoo Finance ‚Äî yf_get","text":"aware using cache system local folder (default  tempdir()), aggregate prices series might match split dividends event happens cache files.","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function to download financial data from Yahoo Finance ‚Äî yf_get","text":"","code":"if (FALSE) { tickers <- c(\"FB\", \"MMM\")  first_date <- Sys.Date() - 15 last_date <- Sys.Date()  df_yf <- yf_get(   tickers = tickers,   first_date = first_date,   last_date = last_date,   do_cache = FALSE )  print(df_yf) }"},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns available collections ‚Äî yf_get_available_collections","title":"Returns available collections ‚Äî yf_get_available_collections","text":"Returns available collections","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns available collections ‚Äî yf_get_available_collections","text":"","code":"yf_get_available_collections()"},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns available collections ‚Äî yf_get_available_collections","text":"string vector available collections","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_collections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns available collections ‚Äî yf_get_available_collections","text":"","code":"yf_get_available_collections() #> [1] \"SP500\" \"IBOV\"  \"FTSE\""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available indices in package ‚Äî yf_get_available_indices","title":"Get available indices in package ‚Äî yf_get_available_indices","text":"funtion return available market indices registered package.","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available indices in package ‚Äî yf_get_available_indices","text":"","code":"yf_get_available_indices()"},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available indices in package ‚Äî yf_get_available_indices","text":"vector mkt indices","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_available_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available indices in package ‚Äî yf_get_available_indices","text":"","code":"av_indices <- yf_get_available_indices()"},{"path":"https://msperlin.github.io/yfR/reference/yf_get_index_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get current composition of stock indices ‚Äî yf_get_index_comp","title":"Get current composition of stock indices ‚Äî yf_get_index_comp","text":"Get current composition stock indices","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_index_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get current composition of stock indices ‚Äî yf_get_index_comp","text":"","code":"yf_get_index_comp(   mkt_index,   do_cache = TRUE,   cache_folder = yf_get_default_cache_folder() )"},{"path":"https://msperlin.github.io/yfR/reference/yf_get_index_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get current composition of stock indices ‚Äî yf_get_index_comp","text":"mkt_index index (e.g. IBOV, SP500, FTSE) do_cache Use cache system? (default = TRUE) cache_folder save cache files? (default = yfR::yf_get_default_cache_folder() )","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_index_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get current composition of stock indices ‚Äî yf_get_index_comp","text":"dataframe index compositino (column might vary)","code":""},{"path":"https://msperlin.github.io/yfR/reference/yf_get_index_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get current composition of stock indices ‚Äî yf_get_index_comp","text":"","code":"df_sp500 <- yf_get_index_comp(\"SP500\") #> ‚úî Got SP500 composition with 505 rows"},{"path":"https://msperlin.github.io/yfR/news/index.html","id":"version-001-2022-03-28","dir":"Changelog","previous_headings":"","what":"Version 0.0.1 (2022-03-28)","title":"Version 0.0.1 (2022-03-28)","text":"First version, ported BatchGetSymbols","code":""}]
